/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.html.simpleparser.HTMLWorker;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.JOptionPane;

/**
 *
 * @author sony
 */
public class bpview extends javax.swing.JFrame {
String user,name,problem,path;
int r,h,s,d,age;
String n,p;
  String zipFile ;
         
    /**
     * Creates new form bpview
     */
    public bpview() {
        initComponents();
    }
  public bpview(String u) {
        initComponents();
        getContentPane().setBackground(Color.ORANGE);
        user=u;
        display();
        display1();
        
    }
  void display()
  {
      try
     {
myconnection obj=new myconnection();
String q="select * from tbbp where user=?";
         PreparedStatement pst=obj.db.prepareStatement(q);
         pst.setString(1, user);
         ResultSet rs;
rs=pst.executeQuery();
if(rs.next())
{
    s=rs.getInt("systolic");
    d=rs.getInt("diastolic");
    h=rs.getInt("heart");
    r=rs.getInt("resp");
// TODO add your handling code here:
    }                                       
 }
catch(SQLException e)
{
    System.out.println(e.getMessage());
}
      if((s<90)&&(d<70))
      {
           l1.setText("HEY! "+user+" ACCORDING TO YOUR BLOOD PRESSURE YOU LOW BLOOD PRESSURE.");
          l2.setText("MAINTAIN OR ADOPT HEALTHY LIFESTYLE AND FOLLOW DIET PLAN AND CONSULT DOCTOR");
          problem="low blood pressure"; 
          return;
      }
      else  if((s<=120)&&(d<=80))
      {
          l1.setText("HEY! "+user+" ACCORDING TO YOUR BLOOD PRESSURE YOU ARE NORMAL.");
           l2.setText("MAINTAIN OR ADOPT HEALTHY LIFESTYLE");
           problem="normal";
          return;
      }
      else if((s>121&&s<139)&&(d>81&&d<89))
      {
          l1.setText("HEY! "+user+" ACCORDING TO YOUR BLOOD PRESSURE YOU HAVE PREHYPERTENTION.");
          l2.setText("MAINTAIN OR ADOPT HEALTHY LIFESTYLE AND FOLLOW DIET PLAN");
          problem="prehypertention";
          return;
      }
     else if((s>140&&s<159)&&(d>90&&d<99))
      {
          l1.setText("HEY! "+user+" ACCORDING TO YOUR BLOOD PRESSURE YOU HAVE HYPERTENTION STAGE 1.");
           l2.setText("MAINTAIN OR ADOPT HEALTHY LIFESTYLE AND FOLLOW DIET PLAN AND CONSULT DOCTOR");
          problem="hbp stage 1";
           return;
      }
     else if((s>160)&&(d>100))
      {
          l1.setText("HEY! "+user+" ACCORDING TO YOUR BLOOD PRESSURE YOU HAVE HYPERTENTION STAGE 2.");
         l2.setText("MAINTAIN OR ADOPT HEALTHY LIFESTYLE AND FOLLOW DIET PLAN AND CONSULT DOCTOR");
         problem="hbp stage 2"; 
         return;
      }
      
      }
  void display1()
  {
      if(h>=60&&h<=100)
      {
          l3.setText("YOUR HEARTBEAT IS NORMAL");
          return;
      }
      else if(h<60)
      {
          l3.setText("YOUR HEARTBEAT IS BELOW NORMAL");
          return;
      }
      else if(h>100)
      {
          l3.setText("YOUR HEART BEAT IS ABOVE NORMAL");
          return;
      }
  }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        l1 = new java.awt.Label();
        l2 = new java.awt.Label();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        l3 = new java.awt.Label();
        button1 = new java.awt.Button();
        button3 = new java.awt.Button();
        button2 = new java.awt.Button();
        button4 = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        l1.setBackground(new java.awt.Color(255, 204, 102));
        l1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        l1.setText("l1");

        l2.setBackground(new java.awt.Color(255, 204, 102));
        l2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        l2.setText("l2");

        label1.setBackground(new java.awt.Color(255, 204, 51));
        label1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label1.setText("BLOOD PRESSURE");

        label2.setBackground(new java.awt.Color(255, 204, 102));
        label2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label2.setText("HEART BEAT");

        l3.setBackground(new java.awt.Color(255, 204, 51));
        l3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        l3.setText("L3");

        button1.setBackground(new java.awt.Color(204, 0, 204));
        button1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        button1.setLabel("GENERATE TIPS");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        button3.setBackground(new java.awt.Color(204, 0, 204));
        button3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        button3.setLabel("BACK");

        button2.setBackground(new java.awt.Color(204, 0, 204));
        button2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        button2.setLabel("GENERATE PDF");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        button4.setBackground(new java.awt.Color(255, 0, 255));
        button4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        button4.setLabel("MAIL TIPS");
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(l2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(l3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(171, 171, 171))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(l2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(l3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(button1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(1, 1, 1))
                        .addComponent(button2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
 if(problem.equals("normal"))
 {
        try
 {
             BufferedReader br=new BufferedReader(new FileReader("E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tips.html"));
            String str="";
            StringBuilder contentBuilder =new StringBuilder();
            while((str = br.readLine())!=null)
            {
                contentBuilder.append(str);
            }
            br.close();
            String content=contentBuilder.toString();
            content=content.replace("$tips", "JUST KEEP CONTROL ON YOUR WEIGHT.");
            name="E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\normal.html";
            File f=new File(name);
            BufferedWriter bw =new BufferedWriter(new FileWriter(f));
            bw.write(content);
            bw.close();
            
 }
       catch(Exception e)
    {
        
    }
        JOptionPane.showMessageDialog(this,"YOUR TIPS HAS BEEN GENERATED");
 
 } 
       else if(problem.equals("low blood pressure"))
 {
        try
 {
             BufferedReader br=new BufferedReader(new FileReader("E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tips.html"));
            String str="";
            StringBuilder contentBuilder =new StringBuilder();
            while((str = br.readLine())!=null)
            {
                contentBuilder.append(str);
            }
            br.close();
            String content=contentBuilder.toString();
            content=content.replace("$tips", "EAT LOT OF SALT.DRINK LOT OF NON ALCHOLIC FLUIDS.DRINK MORE FLUIDS DURING HOT WEATHER AND WHILE SICK WITH A VIRAL ILLNESS,SUCH AS COLD OR FLU.");
            name="E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tipforlowbp.html";
            File f=new File(name);
            BufferedWriter bw =new BufferedWriter(new FileWriter(f));
            bw.write(content);
            bw.close();
            
 }
       catch(Exception e)
    {
        
    }
        JOptionPane.showMessageDialog(this,"YOUR TIPS HAS BEEN GENERATED");
 
 } 
        else if(problem.equals("prehypertention"))
 {
         try
 {
             BufferedReader br=new BufferedReader(new FileReader("E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tips.html"));
            String str="";
            StringBuilder contentBuilder =new StringBuilder();
            while((str = br.readLine())!=null)
            {
                contentBuilder.append(str);
            }
            br.close();
            String content=contentBuilder.toString();
            content=content.replace("$tips", "LOOSE WEIGHT IF YOU ARE OVERWEIGHT.EXCERCISE REGULARLY.EAT PLENTY OF FRUITS,VEGETABLES,WHOLE GRAIN,FISH AND LOW FAT DAIRY.CUT BACK ON DIETTARY SALT/SODUIM.EAT FOOD LOW IN SATURATED AND TRANS FAT AND CHOLESTROL.EAT VEGETARIAN DEIT.DRINK ONLY IN MODERATION");
            name="E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tipsforprehypertention.html";
            File f=new File(name);
            BufferedWriter bw =new BufferedWriter(new FileWriter(f));
            bw.write(content);
            bw.close();
           
 }
       catch(Exception e)
    {
        
    }
         JOptionPane.showMessageDialog(this,"YOUR TIPS HAS BEEN GENERATED");
 }
 else if(problem.equals("hbp stage 1")||problem.equals("hbp stage 2"))
 {
         try
 {
             BufferedReader br=new BufferedReader(new FileReader("E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tips.html"));
            String str="";
            StringBuilder contentBuilder =new StringBuilder();
            while((str = br.readLine())!=null)
            {
                contentBuilder.append(str);
            }
            br.close();
            String content=contentBuilder.toString();
            content=content.replace("$tips", "LOOSE WEIGHT IF YOU ARE OVERWEIGHT.EXCERCISE REGULARLY.EAT PLENTY OF FRUITS,VEGETABLES,WHOLE GRAIN,FISH AND LOW FAT DAIRY.CUT BACK ON DIETTARY SALT/SODUIM.EAT FOOD LOW IN SATURATED AND TRANS FAT AND CHOLESTROL.EAT VEGETARIAN DEIT.DRINK ONLY IN MODERATION.DO EXCERCISE DAILY FOR ATLEAST 30 MINUTES");
            name="E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tipforhighbp.html";
            File f=new File(name);
            BufferedWriter bw =new BufferedWriter(new FileWriter(f));
            bw.write(content);
            bw.close();
            
 }
       catch(Exception e)
    {
        
    }  
         JOptionPane.showMessageDialog(this,"YOUR TIPS HAS BEEN GENERATED");
 }
  n=name;
       // TODO add your handling code here:
    }//GEN-LAST:event_button1ActionPerformed
    
    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        if(problem.equals("normal"))
 {
       try
   {
             path = "E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\normal.pdf";
            PdfWriter pdfWriter = null;
            
            // create a new document
            Document document = new Document();
            try {
                pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(
                        path));
            } catch (DocumentException ex) {
              System.out.print("HTML file close problem:" + ex.getMessage());
            } catch (FileNotFoundException ex) {
                System.out.print("HTML file close problem:" + ex.getMessage());
            }
            document.open();
            HTMLWorker htmlWorker = new HTMLWorker(document);
            String str = "";
            StringBuilder contentBuilder = new StringBuilder();
            BufferedReader in = null;
            try {
                in = new BufferedReader(new FileReader(name));
                
                while ((str = in.readLine()) != null) {
                    
                    contentBuilder.append(str);
                    
                }
            } catch (IOException e) {
                System.out.print("HTML file close problem:" + e.getMessage());
            } 
                try {
                    in.close();
                } catch (IOException ex) {
                    System.out.println(ex.getMessage());
                }
                String content = contentBuilder.toString();
            try {
            htmlWorker.parse(new StringReader(content));
        } catch (IOException ex) {
           System.out.print("HTML file close problem:" + ex.getMessage());
        }
             document.close();
           }
 catch(Exception i) 
               {
                   System.out.println(i.getMessage());
               } 
        zipFile = "E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\normal.zip"; 
         String[] srcFiles = { name, path}; 
   try { 
             // create byte buffer 
             byte[] buffer = new byte[1024]; 
             FileOutputStream fos = new FileOutputStream(zipFile); 
            ZipOutputStream zos = new ZipOutputStream(fos); 
             for (int i=0; i < srcFiles.length; i++) { 
                 File srcFile = new File(srcFiles[i]); 
                 FileInputStream fis = new FileInputStream(srcFile); 
                 // begin writing a new ZIP entry, positions the stream to the start of the entry data 
                 zos.putNextEntry(new ZipEntry(srcFile.getName())); 
                 int length; 
                 while ((length = fis.read(buffer)) > 0) { 
                     zos.write(buffer, 0, length); 
                 } 
                 zos.closeEntry(); 
                 // close the InputStream 
                 fis.close(); 
             } 
             // close the ZipOutputStream 
    zos.close();          } 
         catch (IOException ioe) { 
             System.out.println("Error creating zip file: " + ioe); 
         } 
JOptionPane.showMessageDialog(this,"YOUR TIPS HAS BEEN GENERATED");
 } 
       else if(problem.equals("low blood pressure"))
 {
        
try
   {
            path = "E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tipforlowbp.pdf";
            PdfWriter pdfWriter = null;
            
            // create a new document
            Document document = new Document();
            try {
                pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(
                        path));
            } catch (DocumentException ex) {
              System.out.print("HTML file close problem:" + ex.getMessage());
            } catch (FileNotFoundException ex) {
                System.out.print("HTML file close problem:" + ex.getMessage());
            }
            document.open();
            HTMLWorker htmlWorker = new HTMLWorker(document);
            String str = "";
            StringBuilder contentBuilder = new StringBuilder();
            BufferedReader in = null;
            try {
                in = new BufferedReader(new FileReader(name));
                
                while ((str = in.readLine()) != null) {
                    
                    contentBuilder.append(str);
                    
                }
            } catch (IOException e) {
                System.out.print("HTML file close problem:" + e.getMessage());
            } 
                try {
                    in.close();
                } catch (IOException ex) {
                    System.out.println(ex.getMessage());
                }
                String content = contentBuilder.toString();
            try {
            htmlWorker.parse(new StringReader(content));
        } catch (IOException ex) {
           System.out.print("HTML file close problem:" + ex.getMessage());
        }
             document.close();
           }
 catch(Exception i) 
               {
                   System.out.println(i.getMessage());
               } 
 zipFile = "E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tipforlowbp.zip"; 
         String[] srcFiles = { name,path}; 
   try { 
             // create byte buffer 
             byte[] buffer = new byte[1024]; 
             FileOutputStream fos = new FileOutputStream(zipFile); 
            ZipOutputStream zos = new ZipOutputStream(fos); 
             for (int i=0; i < srcFiles.length; i++) { 
                 File srcFile = new File(srcFiles[i]); 
                 FileInputStream fis = new FileInputStream(srcFile); 
                 // begin writing a new ZIP entry, positions the stream to the start of the entry data 
                 zos.putNextEntry(new ZipEntry(srcFile.getName())); 
                 int length; 
                 while ((length = fis.read(buffer)) > 0) { 
                     zos.write(buffer, 0, length); 
                 } 
                 zos.closeEntry(); 
                 // close the InputStream 
                 fis.close(); 
             } 
             // close the ZipOutputStream 
    zos.close();          } 
         catch (IOException ioe) { 
             System.out.println("Error creating zip file: " + ioe); 
         } 
JOptionPane.showMessageDialog(this,"YOUR TIPS HAS BEEN GENERATED");
 } 
        else if(problem.equals("prehypertention"))
 {
        
         try
   {
            path = "E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tipforprehypertention.pdf";
            PdfWriter pdfWriter = null;
            
            // create a new document
            Document document = new Document();
            try {
                pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(
                        path));
            } catch (DocumentException ex) {
              System.out.print("HTML file close problem:" + ex.getMessage());
            } catch (FileNotFoundException ex) {
                System.out.print("HTML file close problem:" + ex.getMessage());
            }
            document.open();
            HTMLWorker htmlWorker = new HTMLWorker(document);
            String str = "";
            StringBuilder contentBuilder = new StringBuilder();
            BufferedReader in = null;
            try {
                in = new BufferedReader(new FileReader(name));
                
                while ((str = in.readLine()) != null) {
                    
                    contentBuilder.append(str);
                    
                }
            } catch (IOException e) {
                System.out.print("HTML file close problem:" + e.getMessage());
            } 
                try {
                    in.close();
                } catch (IOException ex) {
                    System.out.println(ex.getMessage());
                }
                String content = contentBuilder.toString();
            try {
            htmlWorker.parse(new StringReader(content));
        } catch (IOException ex) {
           System.out.print("HTML file close problem:" + ex.getMessage());
        }
             document.close();
           }
 catch(Exception i) 
               {
                   System.out.println(i.getMessage());
               }
           zipFile = "E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tipforprehypertention.zip"; 
         String[] srcFiles = { name,path}; 
   try { 
             // create byte buffer 
             byte[] buffer = new byte[1024]; 
             FileOutputStream fos = new FileOutputStream(zipFile); 
            ZipOutputStream zos = new ZipOutputStream(fos); 
             for (int i=0; i < srcFiles.length; i++) { 
                 File srcFile = new File(srcFiles[i]); 
                 FileInputStream fis = new FileInputStream(srcFile); 
                 // begin writing a new ZIP entry, positions the stream to the start of the entry data 
                 zos.putNextEntry(new ZipEntry(srcFile.getName())); 
                 int length; 
                 while ((length = fis.read(buffer)) > 0) { 
                     zos.write(buffer, 0, length); 
                 } 
                 zos.closeEntry(); 
                 // close the InputStream 
                 fis.close(); 
             } 
             // close the ZipOutputStream 
    zos.close();          } 
         catch (IOException ioe) { 
             System.out.println("Error creating zip file: " + ioe); 
         } 
          JOptionPane.showMessageDialog(this,"YOUR TIPS HAS BEEN GENERATED");
      }
 else if(problem.equals("hbp stage 1")||problem.equals("hbp stage 2"))
 {
         
       
     try
   {
         path = "E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tipforhypertention.pdf";
            PdfWriter pdfWriter = null;
            
            // create a new document
            Document document = new Document();
            try {
                pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(
                        path));
            } catch (DocumentException ex) {
              System.out.print("HTML file close problem:" + ex.getMessage());
            } catch (FileNotFoundException ex) {
                System.out.print("HTML file close problem:" + ex.getMessage());
            }
            document.open();
            HTMLWorker htmlWorker = new HTMLWorker(document);
            String str = "";
            StringBuilder contentBuilder = new StringBuilder();
            BufferedReader in = null;
            try {
                in = new BufferedReader(new FileReader(name));
                
                while ((str = in.readLine()) != null) {
                    
                    contentBuilder.append(str);
                    
                }
            } catch (IOException e) {
                System.out.print("HTML file close problem:" + e.getMessage());
            } 
                try {
                    in.close();
                } catch (IOException ex) {
                    System.out.println(ex.getMessage());
                }
                String content = contentBuilder.toString();
            try {
            htmlWorker.parse(new StringReader(content));
        } catch (IOException ex) {
           System.out.print("HTML file close problem:" + ex.getMessage());
        }
             document.close();
           }
 catch(Exception i) 
               {
                   System.out.println(i.getMessage());
               }  
      zipFile = "E:\\JAVA\\PROJECT\\NP\\HealthandFitness\\tipforhypertention.zip"; 
         String[] srcFiles = { name,path}; 
   try { 
             // create byte buffer 
             byte[] buffer = new byte[1024]; 
             FileOutputStream fos = new FileOutputStream(zipFile); 
            ZipOutputStream zos = new ZipOutputStream(fos); 
             for (int i=0; i < srcFiles.length; i++) { 
                 File srcFile = new File(srcFiles[i]); 
                 FileInputStream fis = new FileInputStream(srcFile); 
                 // begin writing a new ZIP entry, positions the stream to the start of the entry data 
                 zos.putNextEntry(new ZipEntry(srcFile.getName())); 
                 int length; 
                 while ((length = fis.read(buffer)) > 0) { 
                     zos.write(buffer, 0, length); 
                 } 
                 zos.closeEntry(); 
                 // close the InputStream 
                 fis.close(); 
             } 
             // close the ZipOutputStream 
    zos.close();          } 
         catch (IOException ioe) { 
             System.out.println("Error creating zip file: " + ioe); 
         } 
     JOptionPane.showMessageDialog(this,"YOUR TIPS HAS BEEN GENERATED");
      }

 p=path;
 try
 {
     myconnection obj=new myconnection();
     String q="insert into tbtips(user,name,pdfname,zip) values(?,?,?,?)";
     PreparedStatement pst=obj.db.prepareStatement(q);
     pst.setString(1, user);
     pst.setString(2, n);
    pst.setString(3, p);
    pst.setString(4, zipFile);
     pst.executeUpdate();
 }
 catch(SQLException e)
 {
     System.out.println(e.getMessage());
 }
  // TODO add your handling code here:
    }//GEN-LAST:event_button2ActionPerformed

    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
 mailtips obj=new mailtips(user);
       obj.setVisible(true);
       this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_button4ActionPerformed

   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(bpview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(bpview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(bpview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(bpview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new bpview().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Button button2;
    private java.awt.Button button3;
    private java.awt.Button button4;
    private java.awt.Label l1;
    private java.awt.Label l2;
    private java.awt.Label l3;
    private java.awt.Label label1;
    private java.awt.Label label2;
    // End of variables declaration//GEN-END:variables
}
